<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.communify.domain.post.PostRepository">
    <resultMap id="postOutlineResultMap" type="PostOutline">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="writerId" column="writer_id"/>
        <result property="writerName" column="name"/>
        <result property="categoryId" column="category_id"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="isHot" column="is_hot"/>
        <result property="createdDateTime" column="created_timestamp"/>
    </resultMap>

    <resultMap id="postDetailResultMap" type="PostDetail">
        <result property="content" column="content"/>
        <result property="createdDateTime" column="created_timestamp"/>
        <collection property="fileInfoList" ofType="FileInfo">
            <id property="storedFilename" column="stored_filename"/>
            <result property="originalFilename" column="original_filename"/>
            <result property="extension" column="extension"/>
            <result property="sequence" column="sequence"/>
        </collection>
    </resultMap>

    <insert id="insertPost" useGeneratedKeys="true" keyProperty="request.id">
        INSERT INTO post(title, content, writer_id, category_id)
        VALUES (#{request.title}, #{request.content}, #{request.writerId}, #{request.categoryId});
    </insert>

    <select id="findHotPostOutlines" resultMap="postOutlineResultMap">
        SELECT p.id,
        p.title,
        p.writer_id,
        m.name,
        p.category_id,
        p.view_count,
        p.like_count,
        p.comment_count,
        p.created_timestamp,
        TRUE AS is_hot
        FROM hot_post h
        INNER JOIN post p ON h.post_id = p.id
        LEFT OUTER JOIN member m on p.writer_id = m.id
        <if test="lastPostId != null">
            WHERE p.id &lt; #{lastPostId}
        </if>
        ORDER BY p.id DESC
        LIMIT #{searchSize}
    </select>

    <select id="findPostOutlinesByCategory" resultMap="postOutlineResultMap">
        SELECT p.id,
               p.title,
               p.writer_id,
               m.name,
               p.category_id,
               p.view_count,
               p.like_count,
               p.comment_count,
               p.created_timestamp,
               false as is_hot
        FROM post p
            LEFT OUTER JOIN member m ON p.writer_id = m.id
        WHERE p.category_id = #{categoryId}
        <if test="lastPostId != null">
            AND p.id &lt; #{lastPostId}
        </if>
        GROUP BY p.id
        ORDER BY p.id DESC
        LIMIT #{searchSize}
    </select>

    <select id="findPostOutlinesByMember" resultMap="postOutlineResultMap">
        SELECT p.id,
               p.title,
               p.writer_id,
               m.name,
               p.category_id,
               p.view_count,
               p.like_count,
               p.comment_count,
               p.created_timestamp,
               false as is_hot
        FROM post p
            INNER JOIN member m ON p.writer_id = m.id
        WHERE m.id = #{writerId}
        <if test="lastPostId != null">
            AND p.id &lt; #{lastPostId}
        </if>
        GROUP BY p.id
        ORDER BY p.id DESC
        LIMIT #{searchSize}
    </select>

    <select id="findPostDetail" resultMap="postDetailResultMap">
        SELECT p.content,
               p.created_timestamp,
               f.stored_filename,
               f.original_filename,
               f.extension,
               f.sequence
        FROM post p
                 LEFT OUTER JOIN file f ON p.id = f.post_id
        WHERE p.id = #{postId}
        ORDER BY f.sequence
    </select>

    <update id="incViewCount">
        UPDATE post
        SET view_count = CASE
        <foreach collection="list" item="request" separator="">
            WHEN id = #{request.postId} THEN view_count + #{request.viewCount}
        </foreach>
        ELSE view_count
        END
        WHERE id IN
        <foreach collection="list" item="request" open="(" separator="," close=")">
            #{request.postId}
        </foreach>
    </update>

    <update id="incLikeCount">
        UPDATE post
        SET like_count = like_count + #{likeCount}
        WHERE id = #{postId}
    </update>

    <update id="incCommentCount">
        UPDATE post
        SET comment_count = comment_count + #{count}
        WHERE id = #{postId}
    </update>

    <update id="decCommentCount">
        UPDATE post
        SET comment_count = comment_count - #{count}
        WHERE id = #{postId}
    </update>

    <update id="editPost">
        UPDATE post
        SET title = #{title},
            content = #{content},
            category_id = #{categoryId}
        WHERE id = #{postId}
          AND writer_id = #{requesterId}
    </update>

    <delete id="deletePost">
        DELETE
        FROM post
        WHERE id = #{postId}
          AND writer_id = #{requesterId}
    </delete>

    <select id="isWrittenBy">
        SELECT EXISTS(SELECT *
                      FROM post
                      WHERE id = #{postId}
                        AND writer_id = #{requesterId})
    </select>
</mapper>
